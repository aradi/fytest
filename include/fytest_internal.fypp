#! Names of the known test suites
#:set fytest_suite_names = []

#! Dictionary of test suites
#:set fytest_suites = {}

#! Parameters of the current test suite
#:set fytest_suite_params = {}

#! Dictionary of tests in the current suite
#:set fytest_tests = {}

#! Ordered list of the test names in the current suite
#:set fytest_test_names = []

#! Dictionary of fixtures in the current suite
#:set fytest_fixtures = {"default": {"tests": []}}

#! Parameters of the current fixture
#:set fytest_fixture_params = {}


#! Registers a test case
#!
#! Args:
#!     NAME: Test case name
#!     IMPLEMENTATION: Test implementation
#!
#:def fytest_register_test(NAME, IMPLEMENTATION, FIXTURE)
#:mute

#:global fytest_tests
#:global fytest_test_names
#:global fytest_fixtures

#:if NAME in fytest_tests
  #:stop "Test " + NAME + " has already been defined"
#:endif

#:if FIXTURE not in fytest_fixtures
  #:stop "Fixture " + FIXTURE + " has not been defined yet"
#:endif

$:fytest_test_names.append(NAME)
$:fytest_tests.update([(NAME,&
    & {"implementation": IMPLEMENTATION, "fixture": FIXTURE})])
$:fytest_fixtures[FIXTURE]["tests"].append(NAME)

#:endmute
#:enddef fytest_register_test


#:def fytest_register_test_suite(NAME)
#!
#! Registers the name of a test suite
#!
#! Args:
#!     NAME: Name of the test suite.
#!
#:mute
#:global fytest_suite_names
$:fytest_suite_names.append(NAME)
$:fytest_suites.update([(NAME, {"initializer": fytest_suite_params.get("initializer"),&
    & "finalizer": fytest_suite_params.get("finalizer")})])
#:endmute
#:enddef


#:def fytest_generate_test_suite_code(NAME, SPECIFICATION, IMPLEMENTATIONS)
#!
#! Generates the code (subroutine) for a test suite.
#!
#! Args:
#!     NAME: Name of the test suite
#!     SPECIFICATION: Code containing the specifications
#!     IMPLEMENTATION: Code containing the implementations
#!
#:mute
#:endmute
module fytest_suite_${NAME}$
  use fytest_lib
${SPECIFICATION}$

  character(*), parameter :: fytest_suite_name = "${NAME}$"

  character(len=31), parameter :: fytest_test_names(${len(fytest_test_names)}$) = [&
      & character(len=31) ::&
      & "${'", "'.join(fytest_test_names)}$"&
      & ]

contains

  subroutine fytest_suite_initializer_${NAME}$()
    ${fytest_suites[NAME].get("initializer")}$
  end subroutine fytest_suite_initializer_${NAME}$


  subroutine fytest_suite_finalizer_${NAME}$()
    ${fytest_suites[NAME].get("finalizer")}$
  end subroutine fytest_suite_finalizer_${NAME}$

#:for FIXTURE_NAME, FIXTURE in fytest_fixtures.items()
  subroutine fytest_fixture_${FIXTURE_NAME}$(testname)
    character(*), intent(in) :: testname

 #:set FIXTURE_PARAMETERS = FIXTURE.get("parameters")
 #:set FIXTURE_PARAMETERS = [] if FIXTURE_PARAMETERS is None else FIXTURE_PARAMETERS
 #:for IPARAM in range(len(FIXTURE_PARAMETERS))
   integer :: fytest_iter${IPARAM}$
 #:endfor

    ${FIXTURE.get("specification", '')}$

  #:for IPARAM, FIXTURE_PARAM in enumerate(FIXTURE_PARAMETERS)
    #:set ITERATOR, ARRAY = FIXTURE_PARAM
    do fytest_iter${IPARAM}$ = 1, size(${ARRAY}$)
      ${ITERATOR}$ = ${ARRAY}$(fytest_iter${IPARAM}$)
  #:endfor

  #:if FIXTURE.get("initializer") is not None
    call fytest_fixture_initializer()
  #:endif

    select case (testname)
    #:for TEST_NAME in FIXTURE["tests"]
    case ("${TEST_NAME}$")
      call fytest_test_${TEST_NAME}$()
    #:endfor
    case default
      print *, 'ERROR: Invalid test name "${TEST_NAME}$" in fixture "${FIXTURE_NAME}$"'
    end select

  #:if FIXTURE.get("finalizer") is not None
    call fytest_fixture_finalizer()
  #:endif

  #:for _ in range(len(FIXTURE_PARAMETERS))
    end do
  #:endfor


  contains

    ${FIXTURE.get("implementation", '')}$

  #:if FIXTURE.get("initializer") is not None
    subroutine fytest_fixture_initializer()
      $:FIXTURE["initializer"]
    end subroutine fytest_fixture_initializer
  #:endif

  #:if FIXTURE.get("finalizer") is not None
    subroutine fytest_fixture_finalizer()
      $:FIXTURE["finalizer"]
    end subroutine fytest_fixture_finalizer
  #:endif

  #:for TEST_NAME in FIXTURE["tests"]

    subroutine fytest_test_${TEST_NAME}$
      ${fytest_tests[TEST_NAME]["implementation"]}$
    end subroutine fytest_test_${TEST_NAME}$

  #:endfor

  end subroutine fytest_fixture_${FIXTURE_NAME}$

#:endfor

  subroutine fytest_run_all_${NAME}$()

    integer :: ii

    do ii = 1, size(fytest_test_names)
      call fytest_run_test_${NAME}$(fytest_test_names(ii))
    end do

  end subroutine fytest_run_all_${NAME}$


  subroutine fytest_run_test_${NAME}$(test_name)
    character(*), intent(in) :: test_name

    select case (test_name)
  #:for TEST_NAME in fytest_test_names
    case ("${TEST_NAME}$")
      call fytest_fixture_${fytest_tests[TEST_NAME]["fixture"]}$(test_name)
  #:endfor
    case default
      print '(4A)', 'ERROR: test ', trim(test_name), ' is not defined in test suite ',&
          & trim(fytest_suite_name)
    end select

  end subroutine fytest_run_test_${NAME}$


end module fytest_suite_${NAME}$


module fytest_suite_wrapper_${NAME}$
  use fytest_suite_${NAME}$
  implicit none
  private

  public :: fytest_run_test_${NAME}$
  public :: fytest_run_all_${NAME}$
  public :: fytest_suite_initializer_${NAME}$
  public :: fytest_suite_finalizer_${NAME}$

end module fytest_suite_wrapper_${NAME}$

#:enddef fytest_generate_test_suite_code


#:def fytest_driver_import_wrappers()
  #:for SUITE_NAME in fytest_suite_names
  use fytest_suite_wrapper_${SUITE_NAME}$
  #:endfor
#:enddef fytest_driver_import_wrappers


#:def fytest_driver_run_initializers()
  #:for SUITE_NAME in fytest_suite_names
    call fytest_suite_initializer_${SUITE_NAME}$()
  #:endfor
#:enddef fytest_driver_run_initializers


#:def fytest_driver_run_tests()
  #:for SUITE_NAME in fytest_suite_names
  call fytest_run_all_${SUITE_NAME}$()
  #:endfor
#:enddef fytest_driver_run_tests


#:def fytest_driver_run_finalizers()
  #:for SUITE_NAME in fytest_suite_names
    call fytest_suite_finalizer_${SUITE_NAME}$()
  #:endfor
#:enddef fytest_driver_run_finalizers


#:def fytest_register_fixture(NAME, SPECIFICATION, IMPLEMENTATION, PARAMETERS)
#:global fytest_fixtures
$:fytest_fixtures.update([(NAME, {&
    & "initializer": fytest_fixture_params.get("initializer"),&
    & "finalizer": fytest_fixture_params.get("finalizer"),&
    & "specification": SPECIFICATION,&
    & "implementation": IMPLEMENTATION,&
    & "parameters": PARAMETERS,&
    & "tests": []&
    & })])
#:enddef fytest_register_fixture


#:def fytest_register_test_initializer(IMPLEMENTATION)
#:mute
#:global fytest_fixture_params
#:if fytest_fixture_params.get("initializer") is not None
  #:stop "Double specification of test initializer"
#:endif
$:fytest_fixture_params.update([("initializer", IMPLEMENTATION)])
#:endmute
#:enddef fytest_register_test_initializer


#:def fytest_register_test_finalizer(IMPLEMENTATION)
#:mute
#:global fytest_fixture_params
#:if fytest_fixture_params.get("finalizer") is not None
  #:stop "Double specification of test initializer"
#:endif
$:fytest_fixture_params.update([("finalizer", IMPLEMENTATION)])
#:endmute
#:enddef fytest_register_test_finalizer


#:def fytest_register_test_suite_initializer(IMPLEMENTATION)
#:mute
#:global fytest_suite_params
#:if fytest_suite_params.get("initializer") is not None
  #:stop "Double specification of test suite initializer"
#:endif
$:fytest_suite_params.update([("initializer", IMPLEMENTATION)])
#:endmute
#:enddef fytest_register_test_suite_initializer


#:def fytest_register_test_suite_finalizer(IMPLEMENTATION)
#:mute
#:global fytest_suite_params
#:if fytest_suite_params.get("finalizer") is not None
  #:stop "Double specification of test suite finalizer"
#:endif
$:fytest_suite_params.update([("finalizer", IMPLEMENTATION)])
#:endmute
#:enddef fytest_register_test_suite_finalizer
