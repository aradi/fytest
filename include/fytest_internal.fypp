#! Names of the known test suites
#:set fytest_suite_names = []

#! The current test suite
#:set fytest_current_suite = {}

#! Tests in the current suite
#:set fytest_tests = {}

#! Names of the test names in the current suite
#:set fytest_test_names = []

#! Fixtures in the current suite
#:set fytest_fixtures = {"default": {"tests": []}}

#! Current fixture
#:set fytest_current_fixture = {}


#! Registers a test case
#!
#! Args:
#!     NAME: Test case name
#!     IMPLEMENTATION: Test implementation
#!
#:def fytest_register_test(NAME, IMPLEMENTATION, FIXTURE)
#:mute

#:global fytest_tests
#:global fytest_test_names
#:global fytest_fixtures

#:if NAME in fytest_tests
  #:stop "Test " + NAME + " has already been defined"
#:endif

#:if FIXTURE not in fytest_fixtures
  #:stop "Fixture " + FIXTURE + " has not been defined yet"
#:endif

$:fytest_test_names.append(NAME)
$:fytest_tests.update([(NAME,&
    & {"implementation": IMPLEMENTATION.strip(), "fixture": FIXTURE})])
$:fytest_fixtures[FIXTURE]["tests"].append(NAME)

#:endmute
#:enddef fytest_register_test


#! Registers a test fixture
#!
#! Args:
#!     NAME: Name of the fixture
#!     SPECIFICATION: Specificiation of the fixture
#!     IMPLEMENTATION: Implementation of the fixture
#!     PARAMETERS: Parameters to make parameterized tests.
#!
#:def fytest_register_fixture(NAME, SPECIFICATION, IMPLEMENTATION, PARAMETERS)
#:mute
#:global fytest_fixtures
#:global fytest_current_fixture
$:fytest_fixtures.update([(NAME, {&
    & "initializer": fytest_current_fixture.get("initializer"),&
    & "finalizer": fytest_current_fixture.get("finalizer"),&
    & "specification": SPECIFICATION.strip(),&
    & "implementation": IMPLEMENTATION.strip(),&
    & "parameters": PARAMETERS,&
    & "tests": []&
    & })])
#:set fytest_current_fixture = {}
#:endmute
#:enddef fytest_register_fixture


#! Registers a test fixture initializer
#!
#! Args:
#!     IMPLEMENTATION: implementation part of the test fixture finalizer
#!
#:def fytest_register_test_fixture_initializer(IMPLEMENTATION)
#:mute
#:global fytest_current_fixture
#:if fytest_current_fixture.get("initializer") is not None
  #:stop "Double specification of test initializer"
#:endif
$:fytest_current_fixture.update([("initializer", IMPLEMENTATION)])
#:endmute
#:enddef fytest_register_test_fixture_initializer


#! Registers a test fixture finalizer
#!
#! Args:
#!     IMPLEMENTATION: implementation part of the test fixture finalizer
#!
#:def fytest_register_test_fixture_finalizer(IMPLEMENTATION)
#:mute
#:global fytest_current_fixture
#:if fytest_current_fixture.get("finalizer") is not None
  #:stop "Double specification of test initializer"
#:endif
$:fytest_current_fixture.update([("finalizer", IMPLEMENTATION.strip())])
#:endmute
#:enddef fytest_register_test_fixture_finalizer


#! Registers the name of a test suite
#!
#! Args:
#!     NAME: Name of the test suite.
#!
#:def fytest_register_test_suite(NAME)
#:mute
#:global fytest_suite_names
$:fytest_suite_names.append(NAME)
#:endmute
#:enddef


#! Registers a test suite initializer
#!
#! Args:
#!     IMPLEMENTATION: implementation part of the test suite initializer
#!
#:def fytest_register_test_suite_initializer(IMPLEMENTATION)
#:mute
#:global fytest_current_suite
#:if fytest_current_suite.get("initializer") is not None
  #:stop "Double specification of test suite initializer"
#:endif
$:fytest_current_suite.update([("initializer", IMPLEMENTATION.strip())])
#:endmute
#:enddef fytest_register_test_suite_initializer


#! Registers a test suite finalizer
#!
#! Args:
#!     IMPLEMENTATION: implementation part of the test suite finalizer
#!
#:def fytest_register_test_suite_finalizer(IMPLEMENTATION)
#:mute
#:global fytest_current_suite
#:if fytest_current_suite.get("finalizer") is not None
  #:stop "Double specification of test suite finalizer"
#:endif
$:fytest_current_suite.update([("finalizer", IMPLEMENTATION.strip())])
#:endmute
#:enddef fytest_register_test_suite_finalizer


#! Generates the code for a test suite (module).
#!
#! Args:
#!     NAME: Name of the test suite
#!     SPECIFICATION: Code containing the specifications
#!     IMPLEMENTATION: Code containing the implementations
#!
#:def fytest_render_test_suite(NAME, SPECIFICATION, IMPLEMENTATION)
#:mute
#:endmute
!
! Test suite module ${NAME}$
!
module fytest_suite_${NAME}$
  use fytest_lib
  $:SPECIFICATION.strip()


contains

  $:IMPLEMENTATION.strip()


  subroutine fytest_getSuiteContainer_${NAME}$(suiteContainer)
    type(fytest_SuiteContainer), intent(out) :: suiteContainer

    suiteContainer%name = "${NAME}$"
    #:if "initializer" in fytest_current_suite
      suiteContainer%suiteInitializer => fytest_initializeSuite
    #:endif
    #:if "finalizer" in fytest_current_suite
      suiteContainer%suiteFinalizer => fytest_finalizeSuite
    #:endif
    suiteContainer%suiteParamGetter => fytest_getSuite

  end subroutine fytest_getSuiteContainer_${NAME}$


  subroutine fytest_getSuite(suite)
    type(fytest_SuiteParams), intent(out) :: suite

    suite%name = "${NAME}$"
    suite%fileName = "${_FILE_}$"
    allocate(suite%fixtures(${len(fytest_fixtures)}$))
    #:for FIXTURE_IND, FIXTURE_NAME in enumerate(fytest_fixtures)
      call fytest_getFixture_${FIXTURE_NAME}$(suite%fixtures(${FIXTURE_IND + 1}$))
    #:endfor

  end subroutine fytest_getSuite


  #:if "initializer" in fytest_current_suite
    subroutine fytest_initializeSuite
      ${fytest_current_suite["initializer"]}$
    end subroutine fytest_initializeSuite
  #:endif

  #:if "finalizer" in fytest_current_suite
    subroutine fytest_finalizeSuite
       ${fytest_current_suite["finalizer"]}$
    end subroutine fytest_finalizeSuite
  #:endif

  #:for FIXTURE_NAME, FIXTURE in fytest_fixtures.items()
    subroutine fytest_getFixture_${FIXTURE_NAME}$(fixture)
      type(fytest_FixtureParams), intent(out) :: fixture

      $:FIXTURE.get("specification", '')
      call getFixture(fixture)

    contains

      subroutine getFixture(fixture)
        type(fytest_FixtureParams), intent(out) :: fixture

        fixture%name = "${FIXTURE_NAME}$"
        allocate(fixture%tests(${len(FIXTURE["tests"])}$))
        #:for TEST_IND, TEST in enumerate(FIXTURE["tests"])
          fixture%tests(${TEST_IND + 1}$)%str = "${TEST}$"
        #:endfor
        #:set FIXTURE_PARAMETERS = FIXTURE.get("parameters")
        #:set FIXTURE_PARAMETERS = [] if FIXTURE_PARAMETERS is None else FIXTURE_PARAMETERS
        allocate(fixture%paramBounds(2, ${len(FIXTURE_PARAMETERS)}$))
        #:for IPARAM, FIXTURE_PARAM in enumerate(FIXTURE_PARAMETERS)
          fixture%paramBounds(1, ${IPARAM + 1}$) = lbound(${FIXTURE_PARAM[1]}$, dim=1)
          fixture%paramBounds(2, ${IPARAM + 1}$) = ubound(${FIXTURE_PARAM[1]}$, dim=1)
        #:endfor
        fixture%testRunner => fytest_runFixturedTest_${FIXTURE_NAME}$

      end subroutine getFixture

    end subroutine fytest_getFixture_${FIXTURE_NAME}$
  #:endfor


#:for FIXTURE_NAME, FIXTURE in fytest_fixtures.items()
  subroutine fytest_runFixturedTest_${FIXTURE_NAME}$(testname, testparams, testResult)
    character(*), intent(in) :: testname
    integer, intent(in) :: testparams(:)
    type(fytest_TestResult), intent(out) :: testResult

    $:FIXTURE.get("specification", '')
    call fytest_setUpParams(testparams)
    call fytest_runTest(testname, testResult)

  contains

    $:FIXTURE.get("implementation", '')

    subroutine fytest_setUpParams(testParams)
      integer, intent(in) :: testParams(:)

      #:set FIXTURE_PARAMETERS = FIXTURE.get("parameters")
      #:set FIXTURE_PARAMETERS = [] if FIXTURE_PARAMETERS is None else FIXTURE_PARAMETERS
      if (size(testParams) /= ${len(FIXTURE_PARAMETERS)}$) then
        print *, "Internal error: invalid test parameter array size"
        stop
      end if
      #:for IPARAM, FIXTURE_PARAM in enumerate(FIXTURE_PARAMETERS)
        #:set ITERATOR, ARRAY = FIXTURE_PARAM
        ${ITERATOR}$ = ${ARRAY}$(testParams(${IPARAM + 1}$))
      #:endfor

    end subroutine fytest_setUpParams


    subroutine fytest_runTest(testname, testResult)
      character(*), intent(in) :: testname
      type(fytest_TestResult), intent(out) :: testResult

      testResult%testStatus = fytest_testStatus%testSucceded

      #:if FIXTURE.get("initializer") is not None
        call fytest_initializeFixture()
      #:endif

      select case (testname)
      #:for TEST_NAME in FIXTURE["tests"]
        case ("${TEST_NAME}$")
          call fytest_runTest_${TEST_NAME}$(testResult)
      #:endfor
      case default
        print *, 'ERROR: Invalid test name "${TEST_NAME}$" in suite "${NAME}$", fixture&
            & "${FIXTURE_NAME}$"'
        stop
      end select

      #:if FIXTURE.get("finalizer") is not None
        call fytest_finalizeFixture()
      #:endif

    end subroutine fytest_runTest


    #:if FIXTURE.get("initializer") is not None
      subroutine fytest_initializeFixture()
        $:FIXTURE["initializer"]
      end subroutine fytest_initializeFixture
    #:endif


    #:if FIXTURE.get("finalizer") is not None
      subroutine fytest_finalizeFixture()
        $:FIXTURE["finalizer"]
      end subroutine fytest_finalizeFixture
    #:endif


    #:for TEST_NAME in FIXTURE["tests"]

      subroutine fytest_runTest_${TEST_NAME}$(fytest_testRes)
        type(fytest_TestResult), intent(inout) :: fytest_testRes

        ${fytest_tests[TEST_NAME]["implementation"]}$

      end subroutine fytest_runTest_${TEST_NAME}$

    #:endfor

  end subroutine fytest_runFixturedTest_${FIXTURE_NAME}$

#:endfor


end module fytest_suite_${NAME}$


!
! Test suite wrapper module ${NAME}$
!
module fytest_suite_wrapper_${NAME}$
  use fytest_suite_${NAME}$
  implicit none
  private

  public :: fytest_getSuiteContainer_${NAME}$

end module fytest_suite_wrapper_${NAME}$

#:enddef fytest_render_test_suite


#! Resets the current test suite
#!
#! Should be called after the test suite has been rendered.
#!
#:def fytest_reset_current_test_suite()
#:mute
#:global fytest_current_suite
#:set fytest_current_suite = {}
#:endmute
#:enddef


#! Renders test driver
#!
#:def fytest_render_test_driver()
program fytest_test_driver
  use fytest_lib
  #:for SUITE_NAME in fytest_suite_names
    use fytest_suite_wrapper_${SUITE_NAME}$
  #:endfor
  implicit none

  type(fytest_SuiteContainer), allocatable :: fytest_suiteContainers(:)
  type(fytest_SuiteParams), allocatable :: fytest_suites(:)
  type(fytest_TestContainer), allocatable :: fytest_testContainers(:)
  type(fytest_Timer) :: fytest_testTimer
  type(fytest_TestLogger) :: fytest_logger

  call fytest_getSuiteContainers(fytest_suiteContainers)
  call fytest_testTimer%start()
  call fytest_initializeSuites(fytest_suiteContainers)
  call fytest_getSuiteInfos(fytest_suiteContainers, fytest_suites)
  call fytest_getFlatTestArray(fytest_suites, fytest_testContainers)
  call fytest_runTests(fytest_testContainers, fytest_logger)
  call fytest_finalizeSuites(fytest_suiteContainers)
  call fytest_testTimer%stop()
  call fytest_generateFinalReport(fytest_testContainers, fytest_logger, fytest_testTimer)

contains

  subroutine fytest_getSuiteContainers(suiteContainers)
    type(fytest_SuiteContainer), intent(out), allocatable :: suiteContainers(:)

    allocate(suiteContainers(${len(fytest_suite_names)}$))
    #:for SUITE_IND, SUITE_NAME in enumerate(fytest_suite_names)
      call fytest_getSuiteContainer_${SUITE_NAME}$(suiteContainers(${SUITE_IND + 1}$))
    #:endfor

  end subroutine fytest_getSuiteContainers

end program fytest_test_driver
#:enddef fytest_render_test_driver


#! Renders the code for the REQUIRE macro
#!
#! Args:
#!     COND: Condition in the REQUIRE macro.
#!
#:def fytest_render_require(COND)
if (.not. (${COND}$)) then
  fytest_testRes%testStatus = fytest_TestStatus%testFailed
  fytest_testRes%line = ${_LINE_}$
  fytest_testRes%errorMsg = "${COND}$"
  return
end if
#:enddef
